function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters
    for theta_num = 1:length(theta)
        derivative_along_j = 0;
        for row = 1:m
            h_theta_row = theta(1) + theta(2)*X(row,2);
            err_row = h_theta_row - y(row);
            derivative_along_j = derivative_along_j + err_row*X(row,theta_num);
        end
        theta_next(theta_num) = theta(theta_num) - ((alpha/m) * derivative_along_j);
    end
    theta(1) = theta_next(1);
    theta(2) = theta_next(2);
    % theta = theta - (alpha/m)*(((X*theta - y)'*X)')
    % ====================== YOUR CODE HERE ======================
    % Instructions: Perform a single gradient step on the parameter vector
    %               theta. 
    %
    % Hint: While debugging, it can be useful to print out the values
    %       of the cost function (computeCost) and gradient here.
    %







    % ============================================================

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);

end

end
